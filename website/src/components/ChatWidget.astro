---
interface Props {
  lang?: 'de' | 'en' | 'fr';
}

const { lang = 'de' } = Astro.props as Props;

const chatLabels: Record<string, {
  openChat: string;
  closeChat: string;
  placeholder: string;
  send: string;
  thinking: string;
  error: string;
  title: string;
  subtitle: string;
  contactPrompt: string;
  contactLink: string;
}> = {
  de: {
    openChat: 'Chat öffnen',
    closeChat: 'Chat schließen',
    placeholder: 'Ihre Frage hier...',
    send: 'Senden',
    thinking: 'Denkt nach...',
    error: 'Fehler beim Senden. Bitte versuchen Sie es erneut.',
    title: 'Zoman Chat-Assistent',
    subtitle: 'Fragen Sie uns alles!',
    contactPrompt: 'Möchten Sie einen Termin vereinbaren? Nutzen Sie unser',
    contactLink: 'Kontaktformular'
  },
  en: {
    openChat: 'Open chat',
    closeChat: 'Close chat',
    placeholder: 'Your question here...',
    send: 'Send',
    thinking: 'Thinking...',
    error: 'Error sending. Please try again.',
    title: 'Zoman Chat Assistant',
    subtitle: 'Ask us anything!',
    contactPrompt: 'Want to book an appointment? Use our',
    contactLink: 'contact form'
  },
  fr: {
    openChat: 'Ouvrir le chat',
    closeChat: 'Fermer le chat',
    placeholder: 'Votre question ici...',
    send: 'Envoyer',
    thinking: 'Réflexion...',
    error: 'Erreur d\'envoi. Veuillez réessayer.',
    title: 'Assistant Chat Zoman',
    subtitle: 'Posez-nous vos questions!',
    contactPrompt: 'Vous voulez prendre rendez-vous? Utilisez notre',
    contactLink: 'formulaire de contact'
  }
};

const t = chatLabels[lang] || chatLabels.de;
const AGENT_SERVICE_URL = import.meta.env.PUBLIC_AGENT_SERVICE_URL || 'http://localhost:3002';
---

<!-- Chat Widget Container -->
<div id="chat-widget" class="fixed bottom-6 right-6 z-50">
  
  <!-- Chat Button -->
  <button 
    id="chat-toggle"
    class="bg-zoman-cyan text-white rounded-full p-4 shadow-lg hover:bg-opacity-90 transition-transform hover:scale-110"
    aria-label={t.openChat}
  >
    <svg id="chat-icon-open" class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z"></path>
    </svg>
    <svg id="chat-icon-close" class="w-6 h-6 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
    </svg>
  </button>

  <!-- Chat Window -->
  <div 
    id="chat-window"
    class="hidden absolute bottom-20 right-0 w-96 max-w-[calc(100vw-3rem)] bg-white rounded-lg shadow-2xl flex flex-col"
    style="height: 500px; max-height: calc(100vh - 200px);"
  >
    
    <!-- Header -->
    <div class="bg-gradient-to-r from-zoman-navy to-zoman-cyan text-white p-4 rounded-t-lg">
      <h3 class="font-bold text-lg">{t.title}</h3>
      <p class="text-sm text-gray-100">{t.subtitle}</p>
    </div>

    <!-- Messages Container -->
    <div id="chat-messages" class="flex-1 overflow-y-auto p-4 space-y-3 bg-gray-50">
      <!-- Welcome message -->
      <div class="flex items-start gap-2">
        <div class="bg-zoman-cyan text-white rounded-full p-2 flex-shrink-0">
          <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
            <path d="M10 2a6 6 0 00-6 6v3.586l-.707.707A1 1 0 004 14h12a1 1 0 00.707-1.707L16 11.586V8a6 6 0 00-6-6zM10 18a3 3 0 01-3-3h6a3 3 0 01-3 3z"></path>
          </svg>
        </div>
        <div class="bg-white rounded-lg p-3 shadow-sm max-w-[80%]">
          <p class="text-sm">{t.subtitle}</p>
        </div>
      </div>
    </div>

    <!-- Input Area -->
    <div class="p-4 border-t bg-white rounded-b-lg">
      <form id="chat-form" class="flex gap-2">
        <input 
          type="text"
          id="chat-input"
          placeholder={t.placeholder}
          class="flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-zoman-cyan focus:border-transparent outline-none text-sm"
          maxlength="500"
        />
        <button 
          type="submit"
          id="chat-send-btn"
          class="bg-zoman-cyan text-white px-4 py-2 rounded-lg hover:bg-opacity-90 transition disabled:opacity-50 disabled:cursor-not-allowed"
          aria-label={t.send}
        >
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
          </svg>
        </button>
      </form>
    </div>

  </div>

</div>

<script define:vars={{ t, AGENT_SERVICE_URL, lang }}>
  const chatToggle = document.getElementById('chat-toggle');
  const chatWindow = document.getElementById('chat-window');
  const chatIconOpen = document.getElementById('chat-icon-open');
  const chatIconClose = document.getElementById('chat-icon-close');
  const chatMessages = document.getElementById('chat-messages');
  const chatForm = document.getElementById('chat-form');
  const chatInput = document.getElementById('chat-input');
  const chatSendBtn = document.getElementById('chat-send-btn');

  // Store conversation history
  let conversationHistory = [];

  // Toggle chat window
  chatToggle?.addEventListener('click', () => {
    const isHidden = chatWindow?.classList.contains('hidden');
    
    if (isHidden) {
      chatWindow?.classList.remove('hidden');
      chatIconOpen?.classList.add('hidden');
      chatIconClose?.classList.remove('hidden');
      chatInput?.focus();
    } else {
      chatWindow?.classList.add('hidden');
      chatIconOpen?.classList.remove('hidden');
      chatIconClose?.classList.add('hidden');
    }
  });

  // Add message to chat
  function addMessage(text, isUser = false) {
    const messageDiv = document.createElement('div');
    messageDiv.className = `flex items-start gap-2 ${isUser ? 'flex-row-reverse' : ''}`;
    
    const avatar = document.createElement('div');
    avatar.className = `${isUser ? 'bg-gray-300' : 'bg-zoman-cyan'} text-white rounded-full p-2 flex-shrink-0`;
    avatar.innerHTML = isUser 
      ? '<svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd"></path></svg>'
      : '<svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20"><path d="M10 2a6 6 0 00-6 6v3.586l-.707.707A1 1 0 004 14h12a1 1 0 00.707-1.707L16 11.586V8a6 6 0 00-6-6zM10 18a3 3 0 01-3-3h6a3 3 0 01-3 3z"></path></svg>';
    
    const bubble = document.createElement('div');
    bubble.className = `${isUser ? 'bg-zoman-cyan text-white' : 'bg-white'} rounded-lg p-3 shadow-sm max-w-[80%]`;
    bubble.innerHTML = `<p class="text-sm whitespace-pre-wrap">${text}</p>`;
    
    messageDiv.appendChild(avatar);
    messageDiv.appendChild(bubble);
    chatMessages?.appendChild(messageDiv);
    
    // Scroll to bottom
    chatMessages.scrollTop = chatMessages.scrollHeight;
  }

  // Show typing indicator
  function showTyping() {
    const typingDiv = document.createElement('div');
    typingDiv.id = 'typing-indicator';
    typingDiv.className = 'flex items-start gap-2';
    typingDiv.innerHTML = `
      <div class="bg-zoman-cyan text-white rounded-full p-2 flex-shrink-0">
        <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20"><path d="M10 2a6 6 0 00-6 6v3.586l-.707.707A1 1 0 004 14h12a1 1 0 00.707-1.707L16 11.586V8a6 6 0 00-6-6zM10 18a3 3 0 01-3-3h6a3 3 0 01-3 3z"></path></svg>
      </div>
      <div class="bg-white rounded-lg p-3 shadow-sm">
        <p class="text-sm text-gray-500">${t.thinking}</p>
      </div>
    `;
    chatMessages?.appendChild(typingDiv);
    chatMessages.scrollTop = chatMessages.scrollHeight;
  }

  function removeTyping() {
    document.getElementById('typing-indicator')?.remove();
  }

  // Handle form submit
  chatForm?.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const message = chatInput?.value.trim();
    if (!message) return;

    // Add user message
    addMessage(message, true);
    conversationHistory.push({ role: 'user', content: message });
    
    // Clear input and disable
    chatInput.value = '';
    chatInput.disabled = true;
    chatSendBtn.disabled = true;

    // Show typing
    showTyping();

    try {
      const response = await fetch(`${AGENT_SERVICE_URL}/api/chat`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          message: message,
          history: conversationHistory
        })
      });

      const data = await response.json();
      
      removeTyping();

      if (data.success) {
        addMessage(data.reply, false);
        conversationHistory.push({ role: 'assistant', content: data.reply });

        // If needs contact, show prompt
        if (data.needsContact) {
          setTimeout(() => {
            const contactPrompt = `${t.contactPrompt} <a href="/${lang}/contact" class="text-zoman-cyan underline font-semibold">${t.contactLink}</a>`;
            addMessage(contactPrompt, false);
          }, 500);
        }
      } else {
        addMessage(t.error, false);
      }
    } catch (error) {
      console.error('Chat error:', error);
      removeTyping();
      addMessage(t.error, false);
    } finally {
      chatInput.disabled = false;
      chatSendBtn.disabled = false;
      chatInput.focus();
    }
  });
</script>

<style>
  #chat-messages::-webkit-scrollbar {
    width: 6px;
  }
  
  #chat-messages::-webkit-scrollbar-track {
    background: #f1f1f1;
  }
  
  #chat-messages::-webkit-scrollbar-thumb {
    background: #00B5FF;
    border-radius: 3px;
  }
</style>