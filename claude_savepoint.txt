===========================================
ZOMAN GEB√ÑUDEREINIGUNG - K8S DEPLOYMENT
PROJECT SAVEPOINT - Last Updated: 2025-10-28
===========================================

PROJECT CONTEXT:
- Bootcamp project (deadline: before December)
- Real company: Zoman Geb√§udereinigung (uncle's cleaning company)
- Team: 2 fullstack devs + 2 IT technicians
- Status: ‚úÖ FULLY DEPLOYED WITH HTTPS

TECH STACK:
- Frontend: Astro 5 (SSG - Static Site Generation)
- Backend: Node.js microservices (email-service, agent-service)
- Infrastructure: Azure VM + K3s (single-node Kubernetes)
- Containerization: Docker + K3s
- Reverse Proxy: Nginx with SSL/TLS
- Deployment: Kubernetes manifests
- Monitoring: üîÑ Prometheus + Grafana (IN PROGRESS)

===========================================
CURRENT VM - SWITZERLAND NORTH
===========================================

VM Details:
- OS: Ubuntu 24.04 LTS
- Size: Standard B2as v2 (2 vcpus, 8 GiB memory)
- Region: Switzerland North
- Public IP: 20.250.146.204
- DNS: zoman.switzerlandnorth.cloudapp.azure.com
- SSH: ssh zoman@20.250.146.204 (password auth)
- Created: 10/26/2025, 7:19 PM UTC
- Nginx: Listening on ports 80 (HTTP) and 443 (HTTPS)
- SSL/HTTPS: ‚úÖ CONFIGURED (Let's Encrypt)
- Monitoring: üîÑ In Progress (Prometheus + Grafana deployment pending)

COST MANAGEMENT:
‚ö†Ô∏è Stop VM when not in use to avoid charges:
- Azure Portal: Click "Stop" (deallocates VM)
- CLI: az vm deallocate --resource-group <rg> --name zoman-vm
- When stopped: No compute charges (only minimal storage cost)
- Note: Public IP may change after restart

‚ö†Ô∏è AUTO-START ON REQUEST NOT AVAILABLE:
- Azure VMs do NOT auto-start on HTTP requests
- Alternative: Azure Container Apps (serverless, scales to zero)
- Current best practice: Manual start/stop or keep running 24/7

Installed Software:
[‚úì] Docker (via get.docker.com)
[‚úì] K3s v1.33.5+k3s1 (lightweight Kubernetes)
[‚úì] kubectl (symlinked from k3s)
[‚úì] Git
[‚úì] Certbot (Let's Encrypt SSL)

===========================================
DEPLOYMENT STATUS - FULLY WORKING ‚úÖ
===========================================

Live Website: 
- https://zoman.switzerlandnorth.cloudapp.azure.com ‚úÖ HTTPS ENABLED
- http://20.250.146.204 (HTTP - redirects to HTTPS)

Services Running:
[‚úì] Nginx (reverse proxy) - Ports 80 (HTTP) + 443 (HTTPS)
[‚úì] website (Astro + Nginx) - Port 30080 (NodePort, internal)
[‚úì] email-service (Express) - Port 3001 (ClusterIP)
[‚úì] agent-service (Express) - Port 3002 (ClusterIP)

Features Working:
[‚úì] Multilingual (DE/EN/FR)
[‚úì] Contact form with hCaptcha
[‚úì] Email sending via Mailtrap
[‚úì] AI chat widget (mock responses)
[‚úì] Responsive design
[‚úì] SEO optimized
[‚úì] Service mesh with Nginx reverse proxy
[‚úì] SSL/TLS encryption (Let's Encrypt)

===========================================
CI/CD STATUS
===========================================

Current State: ‚ùå DISABLED
Reason: Workflows target Azure Container Apps (incompatible with VM+K3s setup)

What is CI/CD?
- CI (Continuous Integration): Auto-build on git push
- CD (Continuous Deployment): Auto-deploy to production

Current Deployment Method:
- Manual SSH to VM
- git pull
- docker build
- kubectl delete pod (triggers recreation)

Disabled Workflows:
- .github/workflows/deploy-containers.yml.disabled
- .github/workflows/deploy-website.yml.disabled

Future Options:
1. Keep manual deployment (simple, works well)
2. Create GitHub Actions workflow for VM deployment
3. Use Ansible for automation (planned)

===========================================
SSL/TLS CONFIGURATION - COMPLETED ‚úÖ
===========================================

Certificate Details:
- Provider: Let's Encrypt
- Type: Free SSL certificate (90-day validity)
- Domain: zoman.switzerlandnorth.cloudapp.azure.com
- Auto-renewal: Enabled via certbot.timer
- Renewal check: Twice daily
- Renews: 30 days before expiry

Installation Steps (DONE):
```bash
sudo apt install certbot python3-certbot-nginx -y
sudo certbot --nginx -d zoman.switzerlandnorth.cloudapp.azure.com
sudo certbot renew --dry-run  # Verify auto-renewal
```

Nginx Configuration:
- Port 80: Redirects to HTTPS (301 permanent redirect)
- Port 443: Serves HTTPS traffic with SSL certificates
- SSL certs location: /etc/letsencrypt/live/zoman.../

Verify HTTPS:
```bash
curl -I https://zoman.switzerlandnorth.cloudapp.azure.com
# Should return 200 OK with SSL headers
```

Check Certificate:
```bash
sudo certbot certificates
# Shows expiry date and renewal status
```

===========================================
NEXT STEPS / TODO
===========================================

Priority 1 - Monitoring (IN PROGRESS):
[üîÑ] Deploy Prometheus + Grafana stack
    - Monitor K8s cluster metrics
    - Track pod CPU/memory usage
    - Set up alerting for failures
    - Create dashboards for visualization

Priority 2 - CI/CD (OPTIONAL):
[ ] Decide: Keep manual deployment OR automate?
[ ] If automate: Create GitHub Actions workflow
[ ] If automate: Or use Ansible playbook

Priority 3 - Custom Domain (FUTURE):
[ ] Purchase domain: zoman-gebaudereinigung.de
[ ] Point to Azure IP
[ ] Update SSL certificate
[ ] Update all documentation

Priority 4 - Advanced Features (FUTURE):
[ ] Add database (PostgreSQL) if needed
[ ] Implement actual AI chat (OpenAI API)
[ ] Add more services (house/window/solar cleaning pages)
[ ] SEO improvements (sitemap, robots.txt)

===========================================
MONITORING STACK DEPLOYMENT (NEXT STEP)
===========================================

What is Prometheus + Grafana?
- **Prometheus**: Collects metrics (CPU, memory, requests)
- **Grafana**: Visualizes data in beautiful dashboards

Why monitoring?
- See resource usage in real-time
- Get alerts when pods crash
- Track request latency
- Professional DevOps practice
- Impressive for interviews!

Deployment Steps (TO BE DONE):

1. Create monitoring namespace:
```bash
kubectl create namespace monitoring
```

2. Deploy Prometheus:
```yaml
# k8s/prometheus-deployment.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
    scrape_configs:
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
      - name: prometheus
        image: prom/prometheus:latest
        ports:
        - containerPort: 9090
        volumeMounts:
        - name: config
          mountPath: /etc/prometheus
      volumes:
      - name: config
        configMap:
          name: prometheus-config
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: monitoring
spec:
  selector:
    app: prometheus
  ports:
  - port: 9090
    targetPort: 9090
    nodePort: 30090
  type: NodePort
```

3. Deploy Grafana:
```yaml
# k8s/grafana-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:latest
        ports:
        - containerPort: 3000
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: "admin123"
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: monitoring
spec:
  selector:
    app: grafana
  ports:
  - port: 3000
    targetPort: 3000
    nodePort: 30030
  type: NodePort
```

4. Deploy to K8s:
```bash
kubectl apply -f k8s/prometheus-deployment.yaml
kubectl apply -f k8s/grafana-deployment.yaml

# Wait for pods
kubectl get pods -n monitoring -w
```

5. Access dashboards:
- Prometheus: http://20.250.146.204:30090
- Grafana: http://20.250.146.204:30030
  - Login: admin / admin123

6. Configure Grafana:
- Add Prometheus data source: http://prometheus:9090
- Import dashboard ID: 315 (Kubernetes monitoring)
- Create custom dashboards

===========================================
CRITICAL REMINDERS
===========================================

1. VM IP: 20.250.146.204 (may change after restart)
2. SSH: ssh zoman@20.250.146.204
3. Website: https://zoman.switzerlandnorth.cloudapp.azure.com ‚úÖ
4. STOP VM when not in use to save costs! (No auto-start available)
5. SSL cert auto-renews every 60 days
6. Monitoring: Prometheus (30090), Grafana (30030) - TO BE DEPLOYED
7. CI/CD: Disabled (incompatible workflows)
8. Backups: TrueNAS configured ‚úÖ

===========================================
END OF SAVEPOINT
===========================================

Last Updated: 2025-10-28
Status: Production-ready with HTTPS ‚úÖ
Next: Deploy monitoring stack üîÑ
